import { CallbackFunction } from "../types/callbackFunction";
import Buttons from "./button";
import InputOptions from "./inputOptions";


export default interface Options {
	container?: string | HTMLElement;

	// text (or markup ) displayed in the dialog.
	message?: string  | null;
	messageForm?: HTMLElement | null;
	// Adds a header to the dialog and places this text (or markup ) in an  in an <h5> element
	title?: string | null;
	callback?: CallbackFunction  | null;
	// Default: true for alert, confirm, and prompt; null for custom dialogs. 
	// Allows the user to dismiss the dialog by hitting ESC, which will invoke this function
	onEscape?: boolean | (() => void) | null; 
	// Use onShow to bind a callback function to the show.bs.modal event, which is called just before the modal is shown. See the Bootstrap docs for more information.
	onShow?: (() => void) | null;
    // Use onShown to bind a callback function to the shown.bs.modal event, which is called just after the modal is shown. See the Bootstrap docs for more information.
	onShown?: (() => void) | null;
	//Use onHide to bind a callback function to the hide.bs.modal event, which is called just before the modal is hidden. See the Bootstrap docs for more information.
	onHide?: (() => void) | null;
	// Use onHidden to bind a callback function to the hidden.bs.modal event, which is called just after the modal is hidden. See the Bootstrap docs for more information.
    onHidden?: (() => void) | null;
	// Whether the dialog should be shown immediately.
	show?: boolean; 
	// Whether the dialog should be have a backdrop or not. Also determines whether clicking on the backdrop dismisses the modal.
	backdrop?: boolean | 'static'; 
	// Whether the dialog should have a close button () or not.
	closeButton?: boolean;
	// Animate the dialog in and out (requires a browser which supports CSS animations).
	animate?: boolean;
	// An additional class to apply to the dialog wrapper.
	className?: string | null;
	// Adds the relevant Bootstrap modal size class to the dialog wrapper. Valid values are:
	size?: string | null;
	// Sets the locale to use per dialog â€” this option does not override the default locale. Other dialogs will still use the default locale
	locale?: string;
	// Buttons are defined as JavaScript objects. 
	buttons?: Buttons;
	// Flips the order in which the buttons are rendered, from cancel/confirm to confirm/cancel.
	swapButtonOrder?: boolean;
	// If true, the modal-dialog-centered class will be added to the dialog wrapper.
	centerVertical?: boolean;
	// If true, the modal-dialog-scrollable class will be added to the dialog wrapper. Enable this option to have the content of long modals automatically scroll.
	scrollable?: boolean;
	// If not null, adds the id attribute to the outermost div (the class="modal" wrapper for each modal) to the modal generated by Bootbox. Please note that we do not verify that the id is unique to the current DOM.
	id?: string | null;
	// If not null, includes the DOM element referenced by relatedTarget when calling modal('show') on the Bootbox dialog.
	relatedTarget?: HTMLElement | null;
	//
	reusable?: boolean;

	// Prompt Dialog Options
	// You can set the initial value of the prompt using the value option.
    value?: string | number | [] | null;
	// Changes the type of input generated for the prompt dialog.
	inputType?: string;
    // If you specify select, checkbox, or radio as the input type, you must also supply an array of valid values in the format of
	inputOptions?: InputOptions[];
	min? : string | number; 
	max? : string | number; 
	step? : string | number; 
	maxlength? : number | null; 
	pattern? : string | null; 
	placeholder? : string | null; 
	required? : boolean | null; 
	multiple? : boolean | null; 
	rows? : number | null; 

}
